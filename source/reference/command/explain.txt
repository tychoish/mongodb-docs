=======
explain
=======

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: explain

   .. versionadded:: 2.8

   The :dbcommand:`explain` command provides information on the
   execution of the following commands: :dbcommand:`count`,
   :dbcommand:`group`, :dbcommand:`delete`, and :dbcommand:`update`.
   
   Although MongoDB provides the :dbcommand:`explain` command, the
   preferred method for running :dbcommand:`explain` is to use the
   :ref:`db.collection.explain() helpers <explain-shell-helpers>`. For
   a list of the helpers, see :ref:`explain-shell-helpers`.

   .. note::
      The shell helpers are the only available mechanisms for
      explaining :method:`db.collection.find()` operations.

   The :dbcommand:`explain` command has the following syntax:

   .. code-block:: javascript

      {
         explain: <command>,
         verbosity: <string>
      }

   The command takes the following fields:

   .. include:: explain-fields.rst

.. _explain-shell-helpers:

Shell Helpers
-------------

The preferred method for running :dbcommand:`explain` is to use the
:method:`db.collection.explain()` helpers:

- :method:`db.collection.explain().find()
  <db.collection.explain.find()>`

- :method:`db.collection.explain().aggregate()
  <db.collection.explain.aggregate()>` or
  :method:`db.collection.aggregate()` method with the :ref:`explain
  option <example-aggregate-method-explain-option>`
   
- :method:`db.collection.explain().count()
  <db.collection.explain.count()>`

- :method:`db.collection.explain().group()
  <db.collection.explain.group()>`

- :method:`db.collection.explain().remove()
  <db.collection.explain.remove()>`

- :method:`db.collection.explain().update()
  <db.collection.explain.update()>`

.. _explain-command-behavior:

Behavior
--------

The behavior of :dbcommand:`explain` and the amount of information
related to the evaluated ``<command>`` depend on the ``verbosity`` mode.

.. _explain-queryPlanner:

"queryPlanner" Mode
~~~~~~~~~~~~~~~~~~~

MongoDB runs the :doc:`query optimizer </core/query-plans>` to choose
the winning plan for the operation under evaluation.

:dbcommand:`explain` returns the :data:`~explain.queryPlanner`
information for the evaluated ``<command>``.

.. _explain-executionStats:

"executionStats" Mode
~~~~~~~~~~~~~~~~~~~~~

MongoDB runs the :doc:`query optimizer </core/query-plans>` to choose
the winning plan, executes the winning plan to completion, and returns
statistics describing the execution of the winning plan.

For write operations, :dbcommand:`explain` returns information about
the update or delete operations that *would* be performed, but does
*not* apply the modifications to the database.

:dbcommand:`explain` returns the :data:`~explain.queryPlanner` and
:data:`~explain.executionStats` information for the evaluated
``<command>``. However, :data:`~explain.executionStats` does not
provide query execution information for the rejected plans.

.. _explain-allPlansExecution:

"allPlansExecution" Mode
~~~~~~~~~~~~~~~~~~~~~~~~

**Default mode**. MongoDB runs the :doc:`query optimizer
</core/query-plans>` to choose the winning plan and executes the
winning plan to completion. In ``"allPlansExecution"`` mode, MongoDB
returns statistics describing the execution of the winning plan as well
as statistics for the other candidate plans captured during :ref:`plan
selection <query-plans-query-optimization>`.

For write operations, :dbcommand:`explain` returns information about
the update or delete operations that *would* be performed, but does
*not* apply the modifications to the database.

:dbcommand:`explain` returns the :data:`~explain.queryPlanner` and
:data:`~explain.executionStats` information for the evaluated
``<command>``. The :data:`~explain.executionStats` includes the
*completed* query execution information for the *winning plan*.

If the query optimizer considered more than one plan,
:data:`~explain.executionStats` information also includes the *partial*
execution information captured during the :ref:`plan selection phase
<query-plans-query-optimization>` for both the winning and rejected
candidate plans.

Examples
--------

.. _ex-queryPlanner:

"queryPlanner" Mode
~~~~~~~~~~~~~~~~~~~

The following :dbcommand:`explain` command runs in :ref:`"queryPlanner"
<explain-queryPlanner>` verbosity mode to return the query planning
information for a :dbcommand:`count` command:

.. code-block:: javascript

   db.runCommand(
      {
        explain: { count: "products", query: { quantity: { $gt: 50 } } },
        verbosity: "queryPlanner"
      }
   )

.. _ex-executionStats:

"executionStats"  Mode
~~~~~~~~~~~~~~~~~~~~~~

The following :dbcommand:`explain` operation runs in
:ref:`"executionStats" <explain-executionStats>` verbosity mode to
return the query planning and execution information for a
:dbcommand:`count` command:

.. code-block:: javascript

   db.runCommand(
      { 
         explain: { count: "products", query: { quantity: { $gt: 50 } } },
         verbosity: "executionStats"
      }
   )

.. _ex-allPlansExecution:

"allPlansExecution" Mode
~~~~~~~~~~~~~~~~~~~~~~~~

By default, :dbcommand:`explain` runs in :ref:`"allPlansExecution"
<explain-allPlansExecution>` verbosity mode. The following
:dbcommand:`explain` command returns the :data:`~explain.queryPlanner`
and :data:`~explain.executionStats` for all considered plans for an
:dbcommand:`update` command:

.. note::

   The execution of this explain will *not* modify data but runs the
   query predicate of the update operation. For candidate plans,
   MongoDB returns the execution information captured during the
   :ref:`plan selection phase <query-plans-query-optimization>`.

.. code-block:: javascript

   db.runCommand(
      {
        explain: {
           update: "products",
           updates: [
              {
                  q: { quantity: 1057, category: "apparel" },
                  u: { $set: { reorder: true } }
              }
           ]
        }
      }
   )
