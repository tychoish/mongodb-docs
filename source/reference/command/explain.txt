=======
explain
=======

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: explain

   .. versionadded:: 2.8

   The :dbcommand:`explain` command provides information on the
   execution of the following commands: :dbcommand:`count`,
   :dbcommand:`group`, :dbcommand:`delete`, and :dbcommand:`update`.

   Although MongoDB provides the :dbcommand:`explain` command, the
   preferred method for running :dbcommand:`explain` is to use the
   :method:`db.collection.explain()` helper.

   .. note::
      The shell helpers(), :method:`db.collection.explain()` and
      :method:`cursor.explain()`, are the only available mechanisms for
      explaining :method:`db.collection.find()` operations.

   The :dbcommand:`explain` command has the following syntax:

   .. code-block:: javascript

      {
         explain: <command>,
         verbosity: <string>
      }

   The command takes the following fields:

   .. include:: explain-fields.rst

.. _explain-command-behavior:

Behavior
--------

The behavior of :dbcommand:`explain` and the amount of information
returned depend on the ``verbosity`` mode.

.. |explain| replace:: :dbcommand:`explain`
.. |operation| replace:: ``<command>``

.. _explain-queryPlanner:

``"queryPlanner"`` Mode
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-explain-verbosity-queryPlanner.rst

.. _explain-executionStats:

``"executionStats"`` Mode
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-explain-verbosity-executionStats.rst

.. _explain-allPlansExecution:

``"allPlansExecution"`` Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, :dbcommand:`explain` runs in ``"allPlansExecution"``
verbosity mode.

.. include:: /includes/fact-explain-verbosity-allPlansExecution.rst

Examples
--------

.. _ex-queryPlanner:

``"queryPlanner"`` Mode
~~~~~~~~~~~~~~~~~~~~~~~

The following :dbcommand:`explain` command runs in :ref:`"queryPlanner"
<explain-queryPlanner>` verbosity mode to return the query planning
information for a :dbcommand:`count` command:

.. code-block:: javascript

   db.runCommand(
      {
        explain: { count: "products", query: { quantity: { $gt: 50 } } },
        verbosity: "queryPlanner"
      }
   )

.. _ex-executionStats:

``"executionStats"``  Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following :dbcommand:`explain` operation runs in
:ref:`"executionStats" <explain-executionStats>` verbosity mode to
return the query planning and execution information for a
:dbcommand:`count` command:

.. code-block:: javascript

   db.runCommand(
      { 
         explain: { count: "products", query: { quantity: { $gt: 50 } } },
         verbosity: "executionStats"
      }
   )

.. _ex-allPlansExecution:

``"allPlansExecution"`` Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, :dbcommand:`explain` runs in :ref:`"allPlansExecution"
<explain-allPlansExecution>` verbosity mode. The following
:dbcommand:`explain` command returns the :data:`~explain.queryPlanner`
and :data:`~explain.executionStats` for all considered plans for an
:dbcommand:`update` command:

.. note::

   The execution of this explain will *not* modify data but runs the
   query predicate of the update operation. For candidate plans,
   MongoDB returns the execution information captured during the
   :ref:`plan selection phase <query-plans-query-optimization>`.

.. code-block:: javascript

   db.runCommand(
      {
        explain: {
           update: "products",
           updates: [
              {
                  q: { quantity: 1057, category: "apparel" },
                  u: { $set: { reorder: true } }
              }
           ]
        }
      }
   )
