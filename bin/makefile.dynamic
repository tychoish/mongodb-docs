# Included, dynamically generated makefile sections, to build: sphinx
# targets, LaTeX/PDFs, tables, the installation guides, and sym
# links.

# These makefiles must regenerate every time you run make (becasue
# they have to change every time the commit/branch changes.)

.PHONY:$(output)/makefile.delegated
.PHONY:$(output)/makefile.releases
.PHONY:$(output)/makefile.toc
.PHONY:$(output)/makefile.pdfs

-include $(output)/makefile.delegated
-include $(output)/makefile.releases
-include $(output)/makefile.toc
-include $(output)/makefile.pdfs

$(output)/makefile.delegated:bin/makecloth/delegated.py
	@$(PYTHONBIN) $< $@
$(output)/makefile.releases:bin/makecloth/releases.py
	@$(PYTHONBIN) $< $@
$(output)/makefile.toc:bin/makecloth/toc.py
	@$(PYTHONBIN) $< $@
$(output)/makefile.pdfs:bin/makecloth/pdfs.py
	@$(PYTHONBIN) $< $@

# The build targets and generation of images, are defined in a
# metadata.yaml file, which is the sole source of metadata for image
# generation. 

-include $(output)/makefile.images

$(output)/makefile.images:bin/makecloth/images.py source/images/metadata.yaml
	@$(PYTHONBIN) $< $@ source/images metadata.yaml

# To download interpshinx inventories these's the dependencies are a
# bit different becasue it uses Sphinx's config rather than it's own
# config file.

-include $(output)/makefile.intersphinx

bin/makecloth/intersphinx.py:conf.py
$(output)/makefile.intersphinx:bin/makecloth/intersphinx.py bin/makecloth/__init__.py
	@$(PYTHONBIN) $< $@

# To ensure that composite files with included data are included files
# are rebuilt appropriately, we have to build following special makefile:

.PHONY:$(output)/include-dependencies.json
.PHONY:$(output)/makefile.dependencies
-include $(output)/makefile.dependencies

$(output)/include-dependencies.json:bin/makefile.dynamic
	@grep "\.\. include::" source/* -R | \
             sed $(SED_ARGS_REGEX) -e 's%(.txt:).*include:: %\1%' \
                                   -e "s%:/(includes)%:\1%" \
	                           -e 's%(.rst:).*include:: %\1%' \
                                   -e "s%(.txt:)%\1source/%"  | \
             grep "\:source/includes" | \
             sed $(SED_ARGS_REGEX) -e 's%(.txt):(.*)$$%\1", "dep": "\2" }%' \
                                   -e 's%^(source)%{ "target": "\1%' >| $@
	@echo [build]: $@ generated include dependencies 

$(output)/makefile.dependencies:bin/makecloth/dependencies.py $(output)/include-dependencies.json
	@$(PYTHONBIN) $< $@ $(output)/include-dependencies.json

# The remainder of the files are reasonably straight forward, and use
# a generic build rule.

-include $(output)/makefile.texinfo
-include $(output)/makefile.links
-include $(output)/makefile.sphinx
-include $(output)/makefile.errors
-include $(output)/makefile.migrations
-include $(output)/makefile.sphinx-migration

$(output)/makefile.%:bin/makecloth/%.py bin/makecloth/%.yaml bin/makecloth/__init__.py
	@$(PYTHONBIN) $< $@
